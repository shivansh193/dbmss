generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:dasm%40193@db.omabqxkplnvblbyanwjh.supabase.co:5432/postgres"
}

model Customer {
  id               Int      @id @default(autoincrement()) @map("customer_id")
  name             String   @db.VarChar(100)
  email            String   @unique @db.VarChar(100)
  password         String   @db.VarChar(255)
  registrationDate DateTime @default(now()) @map("registration_date") @db.Date
  contactInfo      String?  @map("contact_info") @db.VarChar(255)
  carts            Cart[]
  orders           Order[]
  reviews          Review[]

  @@map("customer")
}

model Vendor {
  id               Int            @id @default(autoincrement()) @map("vendor_id")
  businessName     String         @map("business_name") @db.VarChar(100)
  storeProfile     String?        @map("store_profile")
  contactInfo      String?        @map("contact_info") @db.VarChar(255)
  registrationDate DateTime       @default(now()) @map("registration_date") @db.Date
  email            String?        @unique @db.VarChar(100)
  password         String?        @db.VarChar(255)
  stores           Store[]
  payouts          VendorPayout[]

  @@map("vendor")
}

model Store {
  id              Int                      @id @default(autoincrement()) @map("store_id")
  vendorId        Int                      @map("vendor_id")
  name            String                   @map("store_name") @db.VarChar(100)
  description     String?
  bannerUrl       String?                  @map("banner_url") @db.VarChar(255)
  logoUrl         String?                  @map("logo_url") @db.VarChar(255)
  addressLine1    String                   @map("address_line1") @db.VarChar(200)
  city            String                   @db.VarChar(100)
  state           String                   @db.VarChar(100)
  postalCode      String                   @map("postal_code") @db.VarChar(20)
  country         String                   @db.VarChar(100)
  latitude         Float?
  longitude        Float?
  operatingRadius  Int                      @default(25000) @map("operating_radius")
  products        Product[]
  vendor          Vendor                   @relation(fields: [vendorId], references: [id])

  @@map("store")
}

model Product {
  id            Int                      @id @default(autoincrement()) @map("product_id")
  storeId       Int                      @map("store_id")
  name          String                   @db.VarChar(100)
  description   String?
  category      String?                  @db.VarChar(50)
  price         Decimal                  @db.Decimal(10, 2)
  stock         Int?
  imageUrl      String?                  @map("image_url") @db.VarChar(255)
  search_vector Unsupported("tsvector")?
  cartItems     CartItem[]
  orderDetails  OrderDetail[]
  store         Store                    @relation(fields: [storeId], references: [id])
  reviews       Review[]

  @@index([search_vector], map: "idx_product_search_vector", type: Gin)
  @@map("product")
}

model Cart {
  id          Int        @id @default(autoincrement()) @map("cart_id")
  customerId  Int        @unique @map("customer_id")
  createdDate DateTime   @default(now()) @map("created_date") @db.Date
  customer    Customer   @relation(fields: [customerId], references: [id])
  cartItems   CartItem[]

  @@map("cart")
}

model CartItem {
  cartId     Int     @map("cart_id")
  productId  Int     @map("product_id")
  quantity   Int     @default(1)
  cartItemId Int     @default(autoincrement()) @map("cart_item_id")
  cart       Cart    @relation(fields: [cartId], references: [id])
  product    Product @relation(fields: [productId], references: [id])

  @@id([cartId, productId])
  @@map("cart_item")
}

model Order {
  id            Int           @id @default(autoincrement()) @map("order_id")
  customerId    Int           @map("customer_id")
  orderDate     DateTime      @default(now()) @map("order_date") @db.Date
  totalAmount   Decimal       @map("total_amount") @db.Decimal(10, 2)
  orderStatus   String        @default("pending") @map("order_status") @db.VarChar(50)
  paymentStatus String        @default("unpaid") @map("payment_status") @db.VarChar(50)
  orderDetails  OrderDetail[]
  customer      Customer      @relation(fields: [customerId], references: [id])
  payments      Payment[]

  @@map("orders")
}

model OrderDetail {
  orderId     Int                  @map("order_id")
  productId   Int                  @map("product_id")
  quantity    Int
  unitPrice   Decimal              @map("unit_price") @db.Decimal(10, 2)
  order       Order                @relation(fields: [orderId], references: [id])
  product     Product              @relation(fields: [productId], references: [id])
  commissions PlatformCommission[]

  @@id([orderId, productId])
  @@map("order_detail")
}

model PopularSearch {
  term         String   @id
  count        Int      @default(1)
  last_searched DateTime @default(now())

  @@map("popular_searches")
}

model PlatformCommission {
  id                   Int         @id @default(autoincrement()) @map("commission_id")
  orderId              Int         @map("order_id")
  productId            Int         @map("product_id")
  amount               Decimal     @db.Decimal(10, 2)
  commissionPercentage Decimal     @map("commission_percentage") @db.Decimal(5, 2)
  processedDate        DateTime    @default(now()) @map("processed_date") @db.Date
  status               String      @default("pending") @db.VarChar(50)
  orderDetail          OrderDetail @relation(fields: [orderId, productId], references: [orderId, productId])

  @@map("platform_commission")
}

model Payment {
  id            Int      @id @default(autoincrement()) @map("payment_id")
  orderId       Int      @map("order_id")
  transactionId String?  @map("transaction_id") @db.VarChar(100)
  paymentMethod String   @map("payment_method") @db.VarChar(50)
  paymentStatus String   @map("payment_status") @db.VarChar(50)
  amount        Decimal  @db.Decimal(10, 2)
  paymentDate   DateTime @default(now()) @map("payment_date") @db.Date
  order         Order    @relation(fields: [orderId], references: [id])

  @@map("payment")
}

model Review {
  id         Int      @id @default(autoincrement()) @map("review_id")
  customerId Int      @map("customer_id")
  productId  Int      @map("product_id")
  rating     Int
  comment    String?
  reviewDate DateTime @default(now()) @map("review_date") @db.Date
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@map("review")
}

model VendorPayout {
  id            Int      @id @default(autoincrement()) @map("payout_id")
  vendorId      Int      @map("vendor_id")
  amount        Decimal  @db.Decimal(10, 2)
  paymentMethod String?  @map("payment_method") @db.VarChar(50)
  payoutDate    DateTime @default(now()) @map("payout_date") @db.Date
  vendor        Vendor   @relation(fields: [vendorId], references: [id])

  @@map("vendor_payout")
}

model cache {
  key        String   @id
  value      Json
  expires_at DateTime @db.Timestamp(6)

  @@index([expires_at], map: "idx_cache_expires_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}
